# EKS メモ
#### EKS
# eks cluster作成
eksctl create cluster -f cluster.yaml
# eks cluster削除
eksctl delete cluster -f cluster.yaml


#### Kubenetes
### pod
# nginxのpodをデプロイ
# Podはcontainerのようなもの(pod: 複数のコンテナを内部で立ち上げることができる)
# *複数は難しいので、1Pod/1containerでやってみる
# nginx yamlのテンプレート作成
kubectl run nginx --image nginx:latest -o yaml --dry-run=client > nginx.yaml
# nginx yamlの反映
kubectl apply -f nginx.yaml
# nginx podsの中身確認
kubectl get pods
# nginx podへの接続　確認(127.0.0.1:8080でアクセス可能)
kubectl port-forward nginx 8080:80

### Serviceリソースについて
# 外部からPodに接続するためのネットワークを扱うリソースたち
## NodePort
# NodePort -> Serviceリソースに含まれる(ネットワーク接続時の方法の一つ)
# Kubernetesで動作しているすべてのNodeが同じPort番号を受け付けることで外部からの接続を受け付ける
# k8sではNode上でPodが起動します。Nodeは1つのVMや仮想マシンを抽象化したリソース
# NodePortをデプロイするためのyaml作成
kubectl create service nodeport nginx --tcp=80:80 --dry-run=client -o yaml
# yaml反映
kubectl apply -f nginx.yaml
# serviceの情報取得
kubectl get svc
nginx        NodePort    10.100.158.61   <none>        80:32606/TCP   19s
# nodeのIP取得
kubectl get node -o wide
# aws上のセキュリティグループで上記IP:ポート番号が通るように設定する



### load balancer作成(node毎にIAM role 割り当てる)
# nodeの削除
eksctl delete nodegroup -f cluster.yaml --approve
# node 作成
eksctl create nodegroup -f cluster.yaml
# podが初期化で削除されているので再度作成
kubectl apply -f nginx.yaml
## load balancerインストール
# cert-manager install
kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml
# load balancer controller yamlのダウンロード
wget https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases/download/v2.4.1/v2_4_1_full.yaml
# cluster nameの変更
sed -i "" "s/your-cluster-name/eks-study-cluster/" v2_4_1_full.yaml
# load balancer controller yamlの反映
kubectl apply -f v2_4_1_full.yaml
# load balancer が正常に動いているか確認
kubectl get pods --all-namespaces
# ingress yaml の作成
kubectl create ingress nginx --dry-run=client -o yaml --rule="/*"=nginx:80 > nginx-ingress.yaml
# nginx-ingress yamlの反映
kubectl apply -f nginx-ingress.yaml
# certificate managerでroute53のドメインを登録
## health check
# podsの詳細確認
kubectl describe pods nginx

### Deployment
# deploymentに属していないpodの削除
kubectl delete -f nginx.yaml
# deployment(nginx)のyaml取得
kubectl create deployment nginx --image nginx:latest -o yaml --dry-run=client
# nginxのdeploy反映
kubectl apply -f nginx.yaml
# deployment resourceの確認
kubectl get deployments.apps
# deploymentから作られるpodの確認
kubectl get pods
## Horizontal Pod Autoscaler
# podレベルでオートスケーリングを行う機能
# CPU, メモリ使用率などのメトリクスを基準にスケーリングする
# 実際のリソ＾す使用率を取得する必要がある
  # metrics-serverを利用する
# metrics serverのinstall
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.6.1/components.yaml
# 確認
kubectl top node
# nginx deployment用リソース作成
kubectl autoscale deployment nginx --cpu-percent 50 --min 1 --max 10
# 作成後HPAの確認
kubectl get horizontalpodautoscaler.autoscaling
# HPAがオートスケールするか確認　負荷をかける
kubectl run apache-bench -i --tty --rm --image httpd -- /bin/sh
while true;
do ab -n 10 -c 10 http://nginx.default.svc.cluster.local/ > /dev/null;
done
## Ckuster Autoscaler
# kubernetesでNodeのオートスケールを行うプログラム
# 各種クラウドプロバイダーの仕組みに沿って、できるように実装されている
# AWSでは, Auto Scaling Groupを使う
# nodeの削除
eksctl delete nodegroup -f cluster.yaml --approve
# nodegroup作成
eksctl create nodegroup -f cluster.yaml
# cluster auto scaler install
wget https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml
# 反映
kubectl apply -f cluster-autoscaler-autodiscover.yaml
# 確認
kubectl get pods -n kube-system
# podを大量に作成してauto scalingするか確認(nginx pod 10個作成)
kubectl apply -f nginx.yaml
kubectl scale deployment --replicas 10 nginx

### 環境変数
## Kubernetesでは、ConfigMap, Secretリソースで環境変数を扱う
## ConfigMap
# 設定情報を保存するためのリソースである
# envファイル作成
touch .env
# ConfigMapリソースの作成
kubectl create configmap eks-study --from-env-file=.env
# ConfigMapリソースの確認
kubectl describe configmaps eks-study
# nginx.yamlでenvを読み込ませて後に 反映
kubectl apply -f nginx.yaml
# envが設定されているか確認
kubectl exec -it nginx-646d654686-45bjr env
# configmpasの更新
kubectl edit configmaps eks-study
# 稼働しているpodに反映させる(podの再作成)
kubectl rollout restart deployment/nginx
## Secret
# 設定情報の中でもパスワードなどの機密情報を保存するためのリソースである
# secretリソースの作成
kubectl create secret generic eks-study --from-literal=DB_USER=root --from-literal=DB_PASSWORD=password
# secretの値を確認
kubectl get secret eks-study -o yaml
# base64でエンコードして確認する
echo 'cGFzc3dvcmQ=' | base64 --decode

### CloudWatch Container Insights
# EKS上のアプリケーションのメトリクスとログを収集、集計、可視化できるもの
# CloudWatchの機能で、ダッシュボード上でメトリクスを可視化したり、アラームを設定、通知できる
eksctl delete nodegroup -f cluster.yaml --approve
# cloudwatchをcluster.yamlに追加後、nodegroup作成
eksctl create nodegroup -f cluster.yaml
# cloudwatch インストール
ClusterName=eks-study-cluster
RegionName=ap-northeast-1
FluentBitHttpPort='2020'
FluentBitReadFromHead='Off'
[[ ${FluentBitReadFromHead} = 'On' ]] && FluentBitReadFromTail='Off'|| FluentBitReadFromTail='On'
[[ -z ${FluentBitHttpPort} ]] && FluentBitHttpServer='Off' || FluentBitHttpServer='On'
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/quickstart/cwagent-fluent-bit-quickstart.yaml | sed 's/{{cluster_name}}/'${ClusterName}'/;s/{{region_name}}/'${RegionName}'/;s/{{http_server_toggle}}/"'${FluentBitHttpServer}'"/;s/{{http_server_port}}/"'${FluentBitHttpPort}'"/;s/{{read_from_head}}/"'${FluentBitReadFromHead}'"/;s/{{read_from_tail}}/"'${FluentBitReadFromTail}'"/' | kubectl apply -f -

### ECRのImageをEKSで利用する
## ECRにnodeのimageをPush
## imageをEKSで利用
# deploymentリソースでimageを起動(manifest 作成)
kubectl create deployment node-web-app --image 895243719651.dkr.ecr.ap-northeast-1.amazonaws.com/node-web-app:0.0.1 -o yaml --dry-run=client > node-web-app.yaml
# 設定反映
kubectl apply -f node-web-app.yaml
# localからEKS上のkubernetesのpodにforwardしている
kubectl port-forward node-web-app-74887dcf7-ljd7n 3000:3000

### ユーザ管理を行う
# EKSにおいてはAWSだけでなくk8sの認証も必要となる
# EKSのリソースを作成したIAMユーザやIAMロールにはデフォルトでk8s上の管理者権限が付与される
# 他のIAMユーザやIAMロールにk8sの権限を与えるには別途操作が必要になる
# k8s上にkubeconfigを作成
aws --profile eks-test-user eks --region ap-northeast-1 update-kubeconfig --name eks-study-cluster
